'use strict';

var cov_2jpgp9ewrx = function () {
    var path = 'D:\\WebStorm\\Jiyuan Mao\\OnlineLibrary\\models\\comments.js',
        hash = '22bc49cf30be69c55cf3ed74c1796da9b468d40f',
        Function = function () {}.constructor,
        global = new Function('return this')(),
        gcv = '__coverage__',
        coverageData = {
        path: 'D:\\WebStorm\\Jiyuan Mao\\OnlineLibrary\\models\\comments.js',
        statementMap: {
            '0': {
                start: {
                    line: 1,
                    column: 15
                },
                end: {
                    line: 1,
                    column: 34
                }
            },
            '1': {
                start: {
                    line: 3,
                    column: 20
                },
                end: {
                    line: 8,
                    column: 29
                }
            },
            '2': {
                start: {
                    line: 10,
                    column: 0
                },
                end: {
                    line: 10,
                    column: 58
                }
            }
        },
        fnMap: {},
        branchMap: {},
        s: {
            '0': 0,
            '1': 0,
            '2': 0
        },
        f: {},
        b: {},
        _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'
    },
        coverage = global[gcv] || (global[gcv] = {});

    if (coverage[path] && coverage[path].hash === hash) {
        return coverage[path];
    }

    coverageData.hash = hash;
    return coverage[path] = coverageData;
}();

var mongoose = (cov_2jpgp9ewrx.s[0]++, require('mongoose'));

var CommentSchema = (cov_2jpgp9ewrx.s[1]++, new mongoose.Schema({
    text: String,
    username: String,
    bookname: String
}, { collection: 'commentsdb' }));

cov_2jpgp9ewrx.s[2]++;
module.exports = mongoose.model('Comment', CommentSchema);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbW1lbnRzLmpzIl0sIm5hbWVzIjpbIm1vbmdvb3NlIiwicmVxdWlyZSIsIkNvbW1lbnRTY2hlbWEiLCJTY2hlbWEiLCJ0ZXh0IiwiU3RyaW5nIiwidXNlcm5hbWUiLCJib29rbmFtZSIsImNvbGxlY3Rpb24iLCJtb2R1bGUiLCJleHBvcnRzIiwibW9kZWwiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLElBQUlBLG1DQUFXQyxRQUFRLFVBQVIsQ0FBWCxDQUFKOztBQUVBLElBQUlDLHdDQUFnQixJQUFJRixTQUFTRyxNQUFiLENBQW9CO0FBQ3BDQyxVQUFNQyxNQUQ4QjtBQUVwQ0MsY0FBU0QsTUFGMkI7QUFHcENFLGNBQVVGO0FBSDBCLENBQXBCLEVBS3BCLEVBQUVHLFlBQVksWUFBZCxFQUxvQixDQUFoQixDQUFKOzs7QUFPQUMsT0FBT0MsT0FBUCxHQUFpQlYsU0FBU1csS0FBVCxDQUFlLFNBQWYsRUFBMEJULGFBQTFCLENBQWpCIiwiZmlsZSI6ImNvbW1lbnRzLmpzIiwic291cmNlUm9vdCI6IkQ6L1dlYlN0b3JtL0ppeXVhbiBNYW8vT25saW5lTGlicmFyeS9tb2RlbHMiLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgbW9uZ29vc2UgPSByZXF1aXJlKCdtb25nb29zZScpO1xyXG5cclxubGV0IENvbW1lbnRTY2hlbWEgPSBuZXcgbW9uZ29vc2UuU2NoZW1hKHtcclxuICAgIHRleHQ6IFN0cmluZyxcclxuICAgIHVzZXJuYW1lOlN0cmluZyxcclxuICAgIGJvb2tuYW1lOiBTdHJpbmcsXHJcbn0sXHJcbnsgY29sbGVjdGlvbjogJ2NvbW1lbnRzZGInIH0pO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBtb25nb29zZS5tb2RlbCgnQ29tbWVudCcsIENvbW1lbnRTY2hlbWEpO1xyXG4iXX0=